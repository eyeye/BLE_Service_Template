


#include "app_util.h"
#include "ble_gatts.h"
#include "ble_l2cap.h"
#include "ble_srv_common.h"
#include "ble.h"
#include "console.h"
#include "nordic_common.h"
#include <string.h>

#include "BLE_{{service.name}}.h"


uint16_t BLE_{{service.name}}_Handle;

{% for char in service.characteristics %}
ble_gatts_char_handles_t BLE_{{service.name}}_{{char.name}}_Handle;
uint8_t {{char.name}}_ValueBuffer[{{char.value.length}}];
{% endfor %}


uint32_t BLE_{{service.name}}_Init(void) __attribute__((section("BLE_SERVICE_Init")))
{
    uint32_t    err_code;
    ble_uuid_t  ble_uuid_base;
    //uint8_t     uuid_base_type;
    
    /*******************************************
     * Add Service {{service.name}}
     */
    ble_uuid_base.type = BLE_UUID_TYPE_BLE;
    ble_uuid_base.uuid = {{service.uuid}};
    
    err_code = sd_ble_gatts_service_add(BLE_GATTS_SRVC_TYPE_PRIMARY, &ble_uuid_base, &BLE_{{service.name}}_Handle);
    APP_ERROR_CHECK(err_code);
    
    
    /*******************************************
    * Add Characteristic List
    */
    ble_gatts_char_md_t char_md;
    ble_gatts_attr_md_t cccd_md;
    ble_gatts_attr_t    attr_char_value;
    ble_uuid_t          ble_uuid_char;
    ble_gatts_attr_md_t attr_md;
    
{% for char in service.characteristics %}
    /**
     * Add Characteristic {{char.name}}
     */
    memset(&cccd_md, 0, sizeof(cccd_md));
    
    {% if char.properties.notify %}
    BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.read_perm);
    BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.write_perm);
    {% else %}
    BLE_GAP_CONN_SEC_MODE_SET_NO_ACCESS(&cccd_md.read_perm);
    BLE_GAP_CONN_SEC_MODE_SET_NO_ACCESS(&cccd_md.write_perm);
    {% endif %}
    cccd_md.vloc = BLE_GATTS_VLOC_STACK;
    
    memset(&char_md, 0, sizeof(char_md));
    
    {% if char.properties.broadcast %}
    char_md.char_props.broadcast = 1;
    {% endif %}
    {% if char.properties.read %}
    char_md.char_props.read = 1;
    {% endif %}
    {% if char.properties.writeWithoutResponse %}
    char_md.char_props.write_wo_resp  = 1;
    {% endif %}
    {% if char.properties.write %}
    char_md.char_props.write = 1;
    {% endif %}
    {% if char.properties.notify %}
    char_md.char_props.notify = 1;
    {% endif %}
    {% if char.properties.indicate %}
    char_md.char_props.indicate = 1;
    {% endif %}
    {% if char.properties.authenticatedSignedWrites %}
    char_md.char_props.auth_signed_wr = 1;
    {% endif %}
    
    char_md.p_char_user_desc  = NULL;
    char_md.p_char_pf         = NULL;
    char_md.p_user_desc_md    = NULL;
    char_md.p_cccd_md         = &cccd_md;
    char_md.p_sccd_md         = NULL;
    
    ble_uuid_char.type = BLE_UUID_TYPE_BLE;
    ble_uuid_char.uuid = {{char.value.uuid}};

    memset(&attr_md, 0, sizeof(attr_md));
    
    {% if char.properties.read %}
    BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.read_perm);
    {% else %}
    BLE_GAP_CONN_SEC_MODE_SET_NO_ACCESS(&attr_md.read_perm);
    {% endif %}
    
    {% if char.properties.write %}
    BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.write_perm);
    {% else %}
    BLE_GAP_CONN_SEC_MODE_SET_NO_ACCESS(&attr_md.write_perm);
    {% endif %}
    attr_md.vloc       = BLE_GATTS_VLOC_USER;
    attr_md.rd_auth    = 0;
    attr_md.wr_auth    = 0;
    attr_md.vlen       = 1;
    
    memset(&attr_char_value, 0, sizeof(attr_char_value));
    
    attr_char_value.p_uuid       = &ble_uuid_char;
    attr_char_value.p_attr_md    = &attr_md;
    attr_char_value.init_len     = {{char.value.length}};
    attr_char_value.init_offs    = 0;
    attr_char_value.max_len      = {{char.value.length}};
    attr_char_value.p_value      = {{char.name}}_ValueBuffer;
    
    err_code = sd_ble_gatts_characteristic_add( BLE_{{service.name}}_Handle,
                                                &char_md,
                                                &attr_char_value,
                                                &BLE_{{service.name}}_{{char.name}}_Handle);
    APP_ERROR_CHECK(err_code);
{% endfor %}

}



uint32_t BLE_{{service.name}}_EventHandler(ble_evt_t * p_ble_evt) __attribute__((section("BLE_SERVICE_EventHandler")))
{
    switch (p_ble_evt->header.evt_id)
    {
        case BLE_GATTS_EVT_WRITE:
        {
            ble_gatts_evt_write_t *write_params;
            write_params = &p_ble_evt->evt.gatts_evt.params.write;
            
            {% for char in service.characteristics %}
            {% if char.properties.write %}
            if( BLE_{{service.name}}_{{char.name}}_Handle == write_params->handle )
            {
                if( BLE_{{service.name}}_{{char.name}}_OnWrite )
                    BLE_{{service.name}}_{{char.name}}_OnWrite(write_params->data, write_params->len);
                break;
            }
            {% endif %}
            {% endfor %}
            break;
        }
        case BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST:
            break;

        case BLE_GATTS_EVT_SYS_ATTR_MISSING:
            break;

        case BLE_GATTS_EVT_HVC:
            ble_gatts_evt_hvc_t *hvc_params;
            hvc_params = &p_ble_evt->evt.gatts_evt.params.hvc;
            {% for char in service.characteristics %}
            {% if char.properties.notify %}
            if( BLE_{{service.name}}_{{char.name}}_Handle == hvc_params->handle )
            {
                if( BLE_{{service.name}}_{{char.name}}_OnConfirmation )
                    BLE_{{service.name}}_{{char.name}}_OnConfirmation();
                break;
            }
            {% endif %}
            {% endfor %}
            break;

        case BLE_GATTS_EVT_SC_CONFIRM:
            console_put_string("BLE_GATTS_EVT_SC_CONFIRM\r\n");
            break;

        case BLE_GATTS_EVT_TIMEOUT:
            console_put_string("BLE_GATTS_EVT_TIMEOUT\r\n");
            break;

        default:
            break;
    }
}



